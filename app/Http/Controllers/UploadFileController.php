<?php

namespace App\Http\Controllers;

use App\Core\ControllerCore;
use App\Factories\ModelFactory;
use Illuminate\Http\Request;
use App\Factories\LibraryFactory;
use App\Http\Requests\UploadRequest;
use Response;
use App\Libraries\FileLibrary;
use Validator;
use Input;
use Carbon\Carbon;

class UploadFileController extends ControllerCore
{

    protected $fileTag = 'file';

	/**
     * Store a newly created resource in storage.
     *
     * @return Response
     */
    public function uploadFiles(UploadRequest $request) {
    
        //$input = Input::all();
        $file = Input::file('file');

        $destinationPath = 'uploads/tmp/'; // uploaded temp path
        
        $mimeType = $file->getMimeType();
        $extension = $file->guessExtension();
        $file_name = $file->getClientOriginalName();
        $file_url = $this->generateFileName($extension,$mimeType);

        $upload_success = Input::file('file')->move($destinationPath, $file_url); // uploading file to given path
        if ($upload_success) {
            return Response::json(array('status' => 'OK', 'file_name' => $file_name, 'file_url' => $file_url, 'mimetype' => $mimeType ));
        } else {
            return Response::json(array('status' => 'Error'));
        }
    }

    public function removeFiles($name){
        
        $configPath = '/public/uploads/tmp/';

        \Storage::delete($configPath.$name);

        return Response::json(array('status' => 'Removed Successfully', 'filename' => $name ));

    }

    /**
     * Auto generates the filenem
     * @param $extension string The file extension 
     * @return string The autogenerated unique filename
     */
    public function generateFileName($extension='',$mimeType='')
    {
        if($mimeType)
        {
            if(isset($this->fileTypes[$mimeType]))
            {
                $this->fileTag = $this->fileTypes[$mimeType];
            }
        }
        
        return uniqid($this->fileTag.'_').'.'.$extension;
    }
}
